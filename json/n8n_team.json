{
  "provider": "autogen_agentchat.teams.RoundRobinGroupChat",
  "component_type": "team",
  "version": 1,
  "component_version": 1,
  "description": "RAG",
  "label": "RAG_17491",
  "config": {
    "participants": [
      {
        "provider": "autogen_agentchat.agents.AssistantAgent",
        "component_type": "agent",
        "version": 1,
        "component_version": 1,
        "description": "一個能夠為大家工作的工具人代理。",
        "label": "工具人專家",
        "config": {
          "name": "assistant_agent",
          "model_client": {
            "provider": "autogen_ext.models.openai.OpenAIChatCompletionClient",
            "component_type": "model",
            "version": 1,
            "component_version": 1,
            "description": "gemini",
            "label": "gemini",
            "config": {
              "model": "gemini-2.0-flash",
              "api_key": "AIzaSyC7bQrehwcofwkCoWZzmoVN-wc_jaYw67Q"
            }
          },
          "tools": [
            {
              "provider": "autogen_core.tools.FunctionTool",
              "component_type": "tool",
              "version": 1,
              "component_version": 1,
              "description": "用來查詢知識庫的資料",
              "label": "n8n_聊天機器人",
              "config": {
                "source_code": "# 設置日誌\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nlogger = logging.getLogger(__name__)\n\n# 獲取環境變數\nCHAT_API_URL = os.getenv(\"CHAT_API_URL\")\n\n# 創建 MCP 服務器\nmcp = FastMCP(\"聊天服務\")\n\n@mcp.tool()\nasync def chat(message: str) -> Dict[str, Any]:\n    \"\"\"\n    發送聊天訊息並獲取回應\n    \n    Args:\n        message (str): 要發送的訊息\n        \n    Returns:\n        Dict[str, Any]: 包含回應的字典\n    \"\"\"\n    try:\n        # 生成會話ID\n        session_id = str(uuid.uuid4())\n        \n        # 準備請求數據\n        request_data = {\n            \"sessionId\": session_id,\n            \"chatInput\": message\n        }\n        \n        # 發送請求獲取聊天回應\n        async with httpx.AsyncClient() as client:\n            response = await client.post(\n                CHAT_API_URL,\n                json=request_data,\n                headers={\"Content-Type\": \"application/json\"},\n                timeout=10\n            )\n            \n            logger.info(f\"API回應狀態碼: {response.status_code}\")\n            logger.info(f\"API回應內容: {response.text}\")\n            \n            response.raise_for_status()\n            chat_data = response.json()\n            \n            return {\n                \"session_id\": session_id,\n                \"message\": message,\n                \"response\": chat_data.get(\"output\", \"無回應\")\n            }\n        \n    except Exception as e:\n        logger.error(f\"處理請求時發生錯誤：{str(e)}\")\n        return {\n            \"error\": str(e),\n            \"session_id\": session_id if 'session_id' in locals() else None\n        }\n\n@mcp.tool()\ndef get_service_info() -> str:\n    \"\"\"獲取服務信息\"\"\"\n    return \"\"\"\n【聊天服務信息】\n\n此服務提供以下功能：\n1. 發送聊天訊息並獲取回應\n2. 自動生成唯一會話ID\n3. 錯誤處理和日誌記錄\n\n使用方法：\n- 使用 chat 工具發送訊息並獲取回應\n- 使用 get_service_info 獲取服務信息\n\n環境配置：\n- CHAT_API_URL: 聊天API的URL\n\"\"\"",
                "name": "N8N_SEARCH_TOOL",
                "description": "A simple calculator that performs basic arithmetic operations",
                "global_imports": [
                  "os",
                  "httpx",
                  "logging",
                  {
                    "module": "mcp.server",
                    "imports": [
                      "FastMCP"
                    ]
                  },
                  "uuid",
                  {
                    "module": "datetime",
                    "imports": [
                      "datetime"
                    ]
                  },
                  {
                    "module": "typing",
                    "imports": [
                      "Dict",
                      "Any",
                      "List"
                    ]
                  }
                ],
                "has_cancellation_support": false
              }
            }
          ],
          "handoffs": [],
          "model_context": {
            "provider": "autogen_core.model_context.UnboundedChatCompletionContext",
            "component_type": "chat_completion_context",
            "version": 1,
            "component_version": 1,
            "description": "An unbounded chat completion context that keeps a view of the all the messages.",
            "label": "UnboundedChatCompletionContext",
            "config": {}
          },
          "description": "An agent that provides assistance with ability to use tools.",
          "system_message": "你是一個樂於助人的助手。謹慎地解決任務。 \n1. 當使用者有生成圖片的需求，請直接調用FLUX_IMAGE_TOOL生圖工具，並生成 1 張 png 格式、畫質為 100、比例為 1:1 、模型為flux-dev的圖片\n2. 當使用者有查詢天氣的需求，請將使用者的輸入城市名稱先進行中翻英再調用WEATHER_SEARCH_TOOL天氣查詢工具。\n3. 當使用者查詢一般資訊時，請優先調用N8N_SEARCH_TOOL工具查找知識庫，若在知識庫裡面找不到才調用exa工具。\n完成後，請說 TERMINATE.",
          "model_client_stream": false,
          "reflect_on_tool_use": false,
          "tool_call_summary_format": "{result}"
        }
      }
    ],
    "termination_condition": {
      "provider": "autogen_agentchat.base.OrTerminationCondition",
      "component_type": "termination",
      "version": 1,
      "component_version": 1,
      "label": "OrTerminationCondition",
      "config": {
        "conditions": [
          {
            "provider": "autogen_agentchat.conditions.TextMentionTermination",
            "component_type": "termination",
            "version": 1,
            "component_version": 1,
            "description": "Terminate the conversation if a specific text is mentioned.",
            "label": "TextMentionTermination",
            "config": {
              "text": "TERMINATE"
            }
          },
          {
            "provider": "autogen_agentchat.conditions.MaxMessageTermination",
            "component_type": "termination",
            "version": 1,
            "component_version": 1,
            "description": "Terminate the conversation after a maximum number of messages have been exchanged.",
            "label": "MaxMessageTermination",
            "config": {
              "max_messages": 10,
              "include_agent_event": false
            }
          }
        ]
      }
    }
  }
}