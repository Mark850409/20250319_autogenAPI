{
    "provider": "autogen_agentchat.teams.RoundRobinGroupChat",
    "component_type": "team",
    "version": 1,
    "component_version": 1,
    "description": "A single AssistantAgent (with a calculator tool) in a RoundRobinGroupChat team. ",
    "label": "RoundRobin Team",
    "config": {
      "participants": [
        {
          "provider": "autogen_agentchat.agents.AssistantAgent",
          "component_type": "agent",
          "version": 1,
          "component_version": 1,
          "description": "一個能夠為大家工作的工具人代理。",
          "label": "工具人專家",
          "config": {
            "name": "assistant_agent",
            "model_client": {
              "provider": "autogen_ext.models.openai.OpenAIChatCompletionClient",
              "component_type": "model",
              "version": 1,
              "component_version": 1,
              "description": "Chat completion client for OpenAI hosted models.",
              "label": "OpenAIChatCompletionClient",
              "config": {
                "model": "gemini-2.0-flash",
                "api_key": "AIzaSyC7bQrehwcofwkCoWZzmoVN-wc_jaYw67Q"
              }
            },
            "tools": [
              {
                "provider": "autogen_core.tools.FunctionTool",
                "component_type": "tool",
                "version": 1,
                "component_version": 1,
                "description": "用來查詢知識庫的資料",
                "label": "n8n_聊天機器人",
                "config": {
                  "source_code": "# 設置日誌\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nlogger = logging.getLogger(__name__)\n\n# 獲取環境變數\nCHAT_API_URL = os.getenv(\"CHAT_API_URL\", \"https://myn8n.zeabur.app/webhook/08c5db7a-6ba6-41b6-bf53-efcf1cf9992a/chat\")\nGROQ_API_KEY = os.getenv(\"GROQ_API_KEY\")\nMODEL = \"qwen-2.5-32b\"\n\ndef get_chat_response(message: str) -> Tuple[str, str]:\n    \"\"\"\n    獲取聊天回應\n    \n    Args:\n        message (str): 要發送的訊息\n        \n    Returns:\n        Tuple[str, str]: (回應內容, 會話ID)\n    \"\"\"\n    session_id = str(uuid.uuid4())\n    \n    try:\n        # 準備請求數據\n        request_data = {\n            \"sessionId\": session_id,\n            \"chatInput\": message\n        }\n        \n        # 發送同步請求\n        response = httpx.post(\n            CHAT_API_URL,\n            json=request_data,\n            headers={\"Content-Type\": \"application/json\"},\n            timeout=10\n        )\n        \n        response.raise_for_status()\n        data = response.json()\n        return data.get(\"output\", \"無回應\"), session_id\n        \n    except httpx.RequestError as e:\n        logger.error(f\"發送訊息時發生錯誤：{str(e)}\")\n        return f\"錯誤：{str(e)}\", session_id\n\nasync def main() -> None:\n    try:\n        # 初始化 Groq model client\n        model_client = OpenAIChatCompletionClient(\n            model=MODEL,\n            api_key=GROQ_API_KEY,\n            base_url=\"https://api.groq.com/openai/v1\",\n            model_capabilities={\n                \"json_output\": True,\n                \"vision\": False,\n                \"function_calling\": True,\n            }\n        )\n        \n        # 創建助理代理\n        agent = AssistantAgent(\n            \"chat_assistant\",\n            model_client=model_client\n        )\n        \n        # 定義要查詢的訊息\n        message = \"查詢知識庫，ISTJ代表人物?\"\n        \n        # 獲取聊天回應\n        chat_response, session_id = get_chat_response(message)\n        \n        # 使用AI代理生成回應分析\n        response = await agent.run(\n            task=f\"以下是一個查詢結果，請分析並總結重點：\\n{chat_response}\"\n        )\n        \n        # 輸出結果\n        print(f\"Session ID: {session_id}\")\n        print(f\"Original Response: {chat_response}\")\n        print(f\"AI Analysis: {response.messages[-1].content}\")\n        \n    except Exception as e:\n        logger.error(f\"執行過程中發生錯誤：{str(e)}\")\n    finally:\n        if 'model_client' in locals():\n            await model_client.close()",
                  "name": "N8N_SEARCH_TOOL",
                  "description": "A simple calculator that performs basic arithmetic operations",
                  "global_imports": [
                    "asyncio",
                    "os",
                    "httpx",
                    "uuid",
                    "logging",
                    {
                      "module": "autogen_agentchat.agents",
                      "imports": [
                        "AssistantAgent"
                      ]
                    },
                    {
                      "module": "autogen_ext.models.openai",
                      "imports": [
                        "OpenAIChatCompletionClient"
                      ]
                    },
                    {
                      "module": "typing",
                      "imports": [
                        "Tuple"
                      ]
                    }
                  ],
                  "has_cancellation_support": false
                }
              }
            ],
            "handoffs": [],
            "model_context": {
              "provider": "autogen_core.model_context.UnboundedChatCompletionContext",
              "component_type": "chat_completion_context",
              "version": 1,
              "component_version": 1,
              "description": "An unbounded chat completion context that keeps a view of the all the messages.",
              "label": "UnboundedChatCompletionContext",
              "config": {}
            },
            "description": "An agent that provides assistance with ability to use tools.",
            "system_message": "你是一個樂於助人的助手。謹慎地解決任務。 \n1. 當使用者有生成圖片的需求，請將使用者的提示詞先進行中翻英再調用GENERATE_IMAGE_TOOL生圖工具。\n2. 當使用者有查詢天氣的需求，請將使用者的輸入城市名稱先進行中翻英再調用WEATHER_SEARCH_TOOL天氣查詢工具。\n3. 當使用者有查詢知識庫的需求，請調用N8N_SEARCH_TOOL工具。\n完成後，請說 TERMINATE.",
            "model_client_stream": false,
            "reflect_on_tool_use": false,
            "tool_call_summary_format": "{result}"
          }
        }
      ],
      "termination_condition": {
        "provider": "autogen_agentchat.base.OrTerminationCondition",
        "component_type": "termination",
        "version": 1,
        "component_version": 1,
        "label": "OrTerminationCondition",
        "config": {
          "conditions": [
            {
              "provider": "autogen_agentchat.conditions.TextMentionTermination",
              "component_type": "termination",
              "version": 1,
              "component_version": 1,
              "description": "Terminate the conversation if a specific text is mentioned.",
              "label": "TextMentionTermination",
              "config": {
                "text": "TERMINATE"
              }
            },
            {
              "provider": "autogen_agentchat.conditions.MaxMessageTermination",
              "component_type": "termination",
              "version": 1,
              "component_version": 1,
              "description": "Terminate the conversation after a maximum number of messages have been exchanged.",
              "label": "MaxMessageTermination",
              "config": {
                "max_messages": 10,
                "include_agent_event": false
              }
            }
          ]
        }
      }
    }
  }